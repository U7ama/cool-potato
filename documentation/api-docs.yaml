openapi: 3.0.0
info:
  title: Recipe API Documentation
  version: "1.0.0"
  description: A simple API to process images for recipes
paths:
  /api/recipe-by-image:
    post:
      summary: Process an image to identify ingredients and fetch recipes.
      description: This endpoint accepts an image in base64 format and returns recipes based on identified ingredients.
      consumes:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: The image to process, encoded in base64.
                  example: "Base 64 here i.e 9j/4AAQSkZJRgABAQAAAQABAAD..."
      responses:
        200:
          description: Recipes fetched successfully.
        500:
          description: An error occurred.

  /api/search-by-name:
    get:
      summary: Search recipes by name
      description: Allows users to search for recipes based on a name query.
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: The recipe name or keyword to search for.
      responses:
        200:
          description: A list of recipes matching the search query.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Recipe"
        500:
          description: Server error.

  /api/search-by-ingredients:
    get:
      summary: Search recipes by ingredients
      description: Allows users to search for recipes based on a list of ingredients.
      parameters:
        - in: query
          name: ingredients
          required: true
          schema:
            type: string
          description: A comma-separated list of ingredients to search for in recipes.
      responses:
        200:
          description: A list of recipes matching the provided ingredients.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Recipe"
        500:
          description: Server error.

  /api/featured-recipes:
    get:
      summary: Fetch featured recipes
      description: Retrieves a list of featured recipes from Spoonacular. These are selected randomly to showcase a variety of options.
      responses:
        200:
          description: A list of featured recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        500:
          description: Server error.

  /api/popular-recipes:
    get:
      summary: Fetch popular recipes
      description: Retrieves a list of popular recipes based on certain criteria (e.g., user ratings) from Spoonacular.
      responses:
        200:
          description: A list of popular recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        500:
          description: Server error.

  /api/auth/signup:
    post:
      summary: Register a new user.
      description: This endpoint registers a new user with their email, password, and name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email.
                phone:
                  type: string
                  description: User's phone number.
                password:
                  type: string
                  description: User's password.
                name:
                  type: string
                  description: User's name.
      responses:
        201:
          description: User registered successfully.
        400:
          description: Invalid input data or both email and phone provided.
        500:
          description: Server error.

  /api/auth/signin:
    post:
      summary: Authenticate a user and return a JWT.
      description: This endpoint authenticates a user by their email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email.
                password:
                  type: string
                  description: User's password.
      responses:
        200:
          description: Authentication successful, token returned.
        400:
          description: Invalid credentials.
        500:
          description: Server error.

  /api/auth/generate-token:
    post:
      summary: Generate a JSON Web Token for user authentication
      description: Generates a JSON Web Token that can be used to authenticate subsequent requests. Requires the user's email address as input.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The user's email address
                phone:
                  type: string
                  format: phone
                  description: The user's phone number
      responses:
        200:
          description: JSON Web Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The generated JSON Web Token
                  expirationTime:
                    type: string
                    format: date-time
                    description: The expiration time of the token
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message detailing why the request failed

  /api/auth/change-password:
    put:
      summary: Change user's password.
      description: Allows users to change their password. Requires a valid JWT token and the user's current password.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: The user's current password.
                newPassword:
                  type: string
                  description: The user's new password.
      responses:
        200:
          description: Password changed successfully.
        400:
          description: Invalid input data or current password is incorrect.
        401:
          description: Authentication required.
        500:
          description: Server error.

  /api/auth/update-profile/{userId}:
    put:
      summary: Update a user's profile.
      description: Allows users to update their own profile information. Requires a valid JWT and the user's ID in the path.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The unique identifier of the user to update.
        - in: header
          name: Custom-Header
          required: false
          schema:
            type: string
          description: An example of a custom header you might need to include.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's name.
                phone:
                  type: string
                  description: User's phone number.
                fastFoodFrequency:
                  type: string
                  description: How often the user eats fast food.
                lifestyle:
                  type: string
                  description: The user's lifestyle.
                isDiabetic:
                  type: boolean
                  description: Whether the user is diabetic.
                profilePicture:
                  type: string
                  description: Update profile picture
      responses:
        200:
          description: Profile updated successfully.
        400:
          description: Invalid input data.
        401:
          description: Authorization required.
        404:
          description: User not found.
        500:
          description: Server error.

  /api/remove-from-favorites/{recipeId}:
    delete:
      summary: Remove a recipe from favorites.
      description: Allows users to remove a recipe from their favorites list. Requires a valid JWT token and the ID of the recipe to be removed.
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: string
          description: The ID of the recipe to remove from favorites.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Recipe removed from favorites successfully.
        401:
          description: Authentication required.
        500:
          description: Server error.

  /api/add-to-favorites:
    post:
      summary: Add a recipe to the user's favorites.
      description: Adds a specified recipe to the authenticated user's list of favorite recipes. Requires a valid JWT for authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: The ID of the recipe to add to favorites.
      responses:
        201:
          description: Recipe added to favorites.
        400:
          description: Recipe already in favorites or invalid request.
        401:
          description: Authentication required.
        500:
          description: Server error.

  /api/favorites:
    get:
      summary: Fetch the user's favorite recipes.
      description: Returns a list of the authenticated user's favorite recipes. Requires a valid JWT for authentication.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully fetched favorite recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Recipe"
        401:
          description: Authentication required.
        500:
          description: Server error.

  /api/recipe/{recipeId}:
    get:
      summary: Fetch a recipe by ID from Spoonacular.
      description: Fetches detailed information for a given recipe by its ID from Spoonacular API.
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: string
          description: The unique identifier of the recipe to fetch.
      responses:
        200:
          description: Recipe details fetched successfully.
        404:
          description: Recipe not found.
        500:
          description: Server error.

  /api/notifications:
    get:
      summary: Get all notifications
      description: Retrieves all notifications stored in the system.
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of notifications.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        500:
          description: Server error.

    post:
      summary: Add a new notification
      description: Creates a new notification in the system.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationInput"
      responses:
        201:
          description: Notification added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        400:
          description: Invalid input data.
        500:
          description: Server error.

components:
  schemas:
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: The generated JSON Web Token
        expirationTime:
          type: string
          format: date-time
          description: The expiration time of the token
    Notification:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the notification.
        title:
          type: string
          description: The title of the notification.
        message:
          type: string
          description: The message content of the notification.
        createdAt:
          type: string
          format: date-time
          description: The date and time when the notification was created.
    NotificationInput:
      type: object
      properties:
        title:
          type: string
          description: The title of the notification.
        message:
          type: string
          description: The message content of the notification.
    Recipe:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the recipe.
        title:
          type: string
          description: The title of the recipe.
        image:
          type: string
          description: URL of the recipe image.
        sourceUrl:
          type: string
          description: Original URL of the recipe.
    securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
